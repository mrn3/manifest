import { NextRequest, NextResponse } from 'next/server';
import { ProjectGenerator } from '@manifest/ai';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Validate required fields
    if (!body.name || !body.description || !body.type) {
      return NextResponse.json(
        { error: 'Missing required fields: name, description, type' },
        { status: 400 }
      );
    }

    // For demo purposes, we'll simulate the AI generation
    // In production, you would use the actual AI service
    const mockProject = {
      id: Date.now().toString(),
      name: body.name,
      description: body.description,
      type: body.type,
      framework: body.framework || 'nextjs',
      database: body.database || 'supabase',
      styling: body.styling || 'tailwindcss',
      features: body.features || [],
      status: 'generated',
      files: [
        {
          path: 'package.json',
          content: JSON.stringify({
            name: body.name.toLowerCase().replace(/\s+/g, '-'),
            version: '1.0.0',
            description: body.description,
            scripts: {
              dev: 'next dev',
              build: 'next build',
              start: 'next start'
            },
            dependencies: {
              next: '^14.0.0',
              react: '^18.0.0',
              'react-dom': '^18.0.0'
            }
          }, null, 2),
          type: 'config'
        },
        {
          path: 'src/app/page.tsx',
          content: `export default function HomePage() {
  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center">
      <div className="text-center">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">
          ${body.name}
        </h1>
        <p className="text-xl text-gray-600 mb-8">
          ${body.description}
        </p>
        <div className="space-y-2">
          <p className="text-sm text-gray-500">Built with:</p>
          <div className="flex justify-center space-x-4">
            <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
              ${body.framework || 'Next.js'}
            </span>
            <span className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm">
              ${body.database || 'Supabase'}
            </span>
            <span className="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm">
              ${body.styling || 'Tailwind CSS'}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
}`,
          type: 'page'
        },
        {
          path: 'README.md',
          content: `# ${body.name}

${body.description}

## Features

${body.features.map((feature: string) => `- ${feature}`).join('\n')}

## Tech Stack

- Framework: ${body.framework || 'Next.js'}
- Database: ${body.database || 'Supabase'}
- Styling: ${body.styling || 'Tailwind CSS'}

## Getting Started

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Run the development server:
   \`\`\`bash
   npm run dev
   \`\`\`

3. Open [http://localhost:3000](http://localhost:3000) in your browser.

## Generated by Manifest AI

This project was generated using Manifest's AI-powered app builder.
`,
          type: 'doc'
        }
      ],
      createdAt: new Date().toISOString(),
      url: null,
      repository: null
    };

    // In a real implementation, you would:
    // 1. Use the ProjectGenerator with actual AI services
    // 2. Save the project to your database
    // 3. Set up the repository and deployment
    
    // const generator = new ProjectGenerator(process.env.OPENAI_API_KEY);
    // const project = await generator.generateProject(body);

    return NextResponse.json({
      success: true,
      project: mockProject
    });

  } catch (error) {
    console.error('Project generation error:', error);
    return NextResponse.json(
      { error: 'Failed to generate project' },
      { status: 500 }
    );
  }
}
